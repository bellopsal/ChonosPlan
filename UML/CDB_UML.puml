@startuml
class CDB {
    get()
    update()
        add
    store
    mult
}
class BRT {
    get()
    occupy_i()
    findFirstAfter()
    one_clock_cycle()
    n_clocks_cycle()
        table
}
class FU {
    operation()
    calculateN()
    new_instruction()
    findFirstEmptyBRT()
    updatePile()
    updatePile_case0()
    moveOperationQueue()
    strBRT()
    strOperationQueue()
    one_clock_cycle()
        name
    type
    pile_size
    ss_size
    SS
    BRT
    latency
    pile
    ss_side
    pile_side
    pile_side
}
class HoldStation {
    empty()
    one_clock_cycle()
    __str__()
        bitMux
    inm
    inv
    destination
    position
    FU1
    FU2
    value1
    value2
    type_operation
    casePile
    bitMux
    inm
    inv
    destination
    position
    FU1
    FU2
    value1
    value2
    type_operation
    casePile
    position
    value1
    RP1
    value2
    RP2
    __init__()
}
class HS {
    freeHS()
    update()
    get()
    __str__()
    one_clock_cycle()
    get()
    empty()
    update_i()
        n
    updateSS
    updatePile
    __init__()
}
class Memory {
    putValues()
    put()
    get()
    __str__()
    dump_csv()
        size
    memory
    __init__()
}
class PC {
    __str__()
    inst_lock()
    one_clock_cycle()
    new_instruction()
        m
    PC
    pointer
    last
    inst_blocked
    programSize
    PC
    last
    PC
    last
    pointer
    PC
    inst_blocked
    last
    pointer
    __init__()
}
class Program {
    get()
        instructions
    n
    dict_names
    n
    n
    __init__()
}
class Instruction {
    __str__()
        tag
    r1
    r2
    r3
    rd
    rs1
    inm
    offset
    BTB
    function
    fu_type
    __init__()
}
class Register {
    __str__()
        number
    td
    fu
    value
    type
    lock
    __init__()
}
class Registers {
    __str__()
    one_clock_cycle()
    new_inst()
    lock()
    unlock()
    get_R_i()
    get_value()
    get_td()
    get_type()
    td_calculation_type1()
    td_calculation_type1_inm()
    td_calculation_type2()
    inst_lock()
    update_scoreboard()
        size
    b_scoreboard
    scoreboard
    __init__()
}
class ShiftStation {
    one_clock_cycle()
    __str__()
        bitMux
    inv
    inm
    FU1
    FU2
    value
    type_operation
    instruction
    value
    RP
    __init__()
}
class SS {
    get()
    __str__()
    one_clock_cycle()
    get()
    update_i()
        n
    __init__()
}
class PileElement {
    __str__()
    __int__()
    one_clock_cycle()
    setValue()
    setFu()
    setRP()
    getValue()
    getFU()
    getRP()
        value
    fu
    value
    fu
    RP
    value
    RP
    value
    fu
    RP
    __init__()
}
class Pile {
    __str__()
    get()
    one_clock_cycle()
        n
    __init__()
}
class Simulador_1_FU {
    dump_csv()
    n_next_cycles()
    one_clock_cycle()
    moveOperationQueue()
    fromHSToSS()
    new_instruction()
    find_lowest_positive_index()
    selection()
    getFU()
    display_SS()
    display_HS()
    display_pile()
    display_ints()
    display()
    display2()
        recent_cycle
    program
    memory
    ss_size
    pile_size
    n_add
    n_mult
    n_store
    PC
    n_cycles
    multiplicity
    fu_jump
    b_hs
    hs
    add_selectionOrder
    mult_selectionOrder
    store_selectionOrder
    statistics
    registers
    CDB
    b_scoreboard
    recent_cycle
    __init__()
}
class Statistics {
    newCycle()
    updateTypeInst()
    increaseTotalLock()
    increaseInstIssued()
        totalLock
    instIssued
    cycles
    __init__()
}
@enduml