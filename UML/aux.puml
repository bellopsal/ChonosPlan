
@startuml
skinparam linetype polyline
skinparam linetype ortho
class CDB {
    get()
    void update()
        List[Integer] add
    List[Integer] store
    List[Integer] mult
}
class BRT {
    get()
    occupy_i()
    find_first_after()
    one_clock_cycle()
       List[Bool] table
}
class FU {
    operation()
    calculateN()
    new_instruction()
    update_pile()
    move_operation_queue()
    one_clock_cycle()
        String name
    Enum type
    Integer pile_size
    Integer ss_size
    SS SS
    BRT BRT
    Integer latency
    Pile pile
    ShiftStation ss_side
    PileElement pile_side

}
enum type{
  ADD
  MULT
  STORE
  JUMP
  }

class HoldStation {
    empty()
    one_clock_cycle()
        Integer bitMux
    String destination
    Integer position
    Integer FU1
    Integer FU2
    Integer RP1
    Integer RP2
    Integer value1
    Integer value2
    String type_operation
    Integer inm
    Bool inv
    Bool casePile

}
class HS {
    freeHS()
    update()
    get()
    one_clock_cycle()
    empty_i()
    update_i()
        Integer hs_size
    List[HS] l_hs
    List[Bool] occupied
    Integer updateSS
    Integer updatePile

}
class Memory {
    put()
    get()
        Integer memory_size
    List[Integer] memory

}

class PC {
    inst_lock()
    one_clock_cycle()
    new_instruction()
        Integer multiplicity
    List[Integer] PC
    Integer pointer
    Integer last
    List[Integer] inst_blocked
    Integer programSize
    
}
class Program {
    get()
        List[Intructions] instructions
    Integer program_size
    Dict dict_names

}
class Instruction {

        String tag
    Integer r1
    Integer r2
    Integer r3
    Integer rd
    Integer rs1
    Integer inm
    String offset
    Bool BTB
    String operation
    String fu_type

}
class Register {
    
        Integer number
    Integer td
    String fu
    Integer value
    String type
    Bool lock
    __init__()
}
class Registers {
    __str__()
    one_clock_cycle()
    new_inst()
    lock()
    unlock()
    get_R_i()
    get_value()
    get_td()
    get_type()
    rp_calculation_type1()
    rp_calculation_type1_inm()
    rp_calculation_type2()
    inst_lock()
    update_scoreboard()
        Integer size

}

class ShiftStation {
    one_clock_cycle()
        Integer bitMux
    Bool inv
    String FU1
    String FU2
    Integer value
    String type_operation
    String instruction
    Integer value
    Integer RP
    __init__()
}
class SS {
    get()
    one_clock_cycle()
    update_i()
        n
    __init__()
}

class PileElement {
    one_clock_cycle()
    setValue()
    setFu()
    setRP()
    getValue()
    getFU()
    getRP()
        Integer value
    String fu
    Integer value
    Integer RP
}
class Pile {
    get()
    one_clock_cycle()
        Integer pile_size
}
class Simulador {
    n_next_cycles()
    one_clock_cycle()
    move_operation_queue()
    from_HS_to_SS()
    new_nnstruction()
    find_lowest_positive_index()
    selection()
        Integer recent_cycle
    Program program
    Memory memory
    Integer ss_size
    Integer pile_size
    Integer n_add
    Integer n_mult
    Integer n_store
    PC PC
    Integer n_cycles
    Integer multiplicity
    List[FU] fus_add
    List[FU] fus_mult
    List[FU] fus_store
    FU fu_jump
    Bool b_hs
    HS hs
    List[Integer]add_selectionOrder
    List[Integer] mult_selectionOrder
    List[Integer] store_selectionOrder
    Statistics statistics
    Registers registers
    CDB CDB
}
class Statistics {
    newCycle()
    updateTypeInst()
    increaseTotalLock()
    increaseInstIssued()
        totalLock
    instIssued
    cycles

}
Simulador --  FU
Simulador -- Memory
Simulador -- Statistics
Simulador -- PC
Simulador -- Program
FU -- BRT
HS --  HoldStation
Registers -- Register
Program --  Instruction

SS -- ShiftStation
FU -- SS
FU -- Pile
Pile -- PileElement
Simulador -- CDB
Simulador -- HS
Simulador -- Registers




@enduml






